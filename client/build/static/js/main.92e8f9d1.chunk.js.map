{"version":3,"sources":["components/Navbar/index.js","components/Jumbotron/index.js","utils/API.js","components/Grid/index.js","components/BookSearch/index.js","components/SearchButton/index.js","pages/Search.js","components/Footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","className","style","color","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Jumbotron","query","axios","get","Container","fluid","children","Row","Col","size","split","map","join","BookSearch","props","name","placeholder","SearchButton","float","Search","useState","setQuery","useEffect","API","then","res","console","log","data","onClick","event","target","value","Footer","App","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.92e8f9d1.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg\" style={{color: 'white'}}>\n            <Link to=\"/\" className=\"navbar navbar-brand me\" >Google Book Search</Link>\n            <button className=\"navbar-toggler navbar-dark\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>    \n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link to=\"/books\" className=\"nav-link\" >Search</Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link to=\"/saved\" className=\"nav-link active\">Saved</Link>\n                    </li>     \n                </ul>\n            </div>      \n        </nav>  \n    );\n}\n\nexport default Navbar","import React from 'react'\n\nconst Jumbotron = () => {\n    return (\n        <div className=\"jumbotron jumbotron-fluid bg-white\">\n            <div className=\"container\">\n                <h1 className=\"display-4 text-center\">Google Books Search</h1>\n                <p className=\"lead text-center\">Search for and Save Books of Interest</p>\n            </div>\n      </div>\n    )\n}\n\nexport default Jumbotron","import axios from \"axios\";\n\nexport default {\n\n    // Search books\n    searchBooks: function(query) {\n        return axios.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + query);\n    },\n\n    // Adds (saves) a book to user's bookshelf\n    addBook: function(bookData) {\n        return axios.post(\"/api/books\", bookData);\n    },\n\n    // Gets saved books\n    savedBooks: function() {\n    return axios.get(\"/api/saved\");\n    },\n    \n    // Deletes book\n    deleteBook: function(id) {\n        return axios.delete(\"/api/saved/\" + id);\n    },\n};","// Using the grid component provided in class to use bootstrap container, row, and columns\n\nimport React from \"react\";\n\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}","import React from \"react\";\n\nfunction BookSearch(props) {\n  return (\n    <form>\n        <div className=\"form-group\">\n            <input className=\"form-control\" name=\"booksearch\" type=\"text\" placeholder=\"Search Books\" aria-label=\"Booksearch\" />\n        </div>\n    </form>\n  );\n}\n\nexport default BookSearch;\n","import React from \"react\";\n\nfunction SearchButton(props) {\n    return (\n        <button {...props} style={{ float: \"right\" }} className=\"btn btn-secondary\">\n            {props.children}\n        </button>\n    );\n}\n\nexport default SearchButton;","import React, { useState, useEffect } from \"react\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport Booksearch from \"../components/BookSearch\";\nimport SearchButton from \"../components/SearchButton\";\n\nfunction Search() {\n   const [query, setQuery] = useState([]);\n\n   useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    API.searchBooks(query)\n      .then(res => console.log(res.data));\n   });\n        \n  \n  const handleFormSubmit = event => {\n    setQuery(event.target.value);\n   };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-12\">\n            <Booksearch />\n            <SearchButton\n                onClick={handleFormSubmit}\n            >\n                Search\n            </SearchButton>\n          </Col>\n        </Row>\n      </Container>\n    );\n}\n\nexport default Search;","import React from 'react'\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>Copyright &copy; 2021</p>            \n        </footer>\n    )\n}\n\nexport default Footer","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\"\nimport Jumbotron from \"./components/Jumbotron\"\nimport Search from \"./pages/Search\"\n//import Saved from \"./pages/Saved\"\nimport Footer from \"./components/Footer\"\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <Jumbotron />\n        <Switch>\n          <Route exact path={[\"/\", \"/books\"]}>\n            <Search />\n          </Route>\n          {/* <Route exact path=\"/saved\">\n            <Saved />\n          </Route>  */}\n        </Switch> \n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}